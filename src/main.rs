mod bitboard;
mod genome;
mod evaluation;
mod search;
mod evolution;

use std::fs;
use std::cmp::Ordering;
use rayon::prelude::*;
use crate::evaluation::genome_to_evaluator;
use crate::bitboard::string_to_board;
use crate::search::make_move;
use crate::bitboard::flip_board;
use crate::bitboard::board_to_string;

fn main() {

	if fs::metadata("./nechedbg/").is_ok() {
		println!("Found debug folder, attempting to resume evolution...");
		evolution::evolve_resume(200, 10, 6);
	} else {
		println!("No debug folder found. Evolving from zero knowledge.");
		fs::create_dir("./nechedbg");
		evolution::evolve_zero(200, 10, 6);
	}

	//evolve_zero(200, 10, 6);
    // let paths = fs::read_dir("./nechedbg/").unwrap();

    // for path in paths {
    //     println!("{}", path.unwrap().file_name().into_string().unwrap());
    // }
	
	// let x = genome::gen_f0_genome(200);
	// let x = String::from("AAGTTACCGGTCAGTCTATGGCATACTGGGACAATGATGACCTGAAGACAAGGCTAGAACAATGGGCCTCATGTAATCGGCCGCGATCGTGAATGCAAACTCCGGTTGTTTAACCGCGACTGGATACTGGGCTAAATGTCTGTCAGTCTTCGGCGACGAAGGTACTTTGGACCAAATATCCTTGGTGCAGAATGCCTACCTGTGCCTGTGTTAAACATACGTGATAAGTTTAATACCATCTCACTTGGCCGACGGTATCGATGCGCAAAGATGTGGAAAGCACTCAGAACGTGCTTATTGTTCGAATCTAAACTGATTTAGGTCCTGGTAATAAGACGCTGTGTCCTCAAAATAAGCACACCCGTCTTTATGGTGACGAATAATTACTCCCAGGACCCACGGTTTAGAGTGAGCGGAGGTGCGGCTCAACGCTGGCGTCTACGAGCTCACCGGCTATAAGGCTCATGGAACGAGAGGTCCCTGTGCTACTGATACAAAACTTATATGGCGACTTAAGGGCGTCATACGTCCGATCTAGCTTATCCCGTTACACTGCGCAAACGTCAGCTCTTGAAGGGGGCTGTGAGAACAGGAGCGACCTACTCTGTGCCTAATGTTGGCCCACGGTTAGCGCAGGGAGCAATGCTCCCATCAGCAGAAGTAAATGGTTCCTGCTCTTTCGGCCATCGGCTCGCGTATGATGCCTGGGGGGGGTAAATACCTATAGTCTCCCAAAGAGCCGTCGCTTTGGGGTGACCGGATCGTGTTAGTCCGAGTAACTTTTTAGCCTGCCGCAGCACGCTCTTGTTCAGATTCCTATACTACAAAAGTATTACGAGGGCTAGCCTGTAATGTGTTGGCATCTCCTCCGGTCATTTCGAATCATTTAATTCACTCCCCTGGAGTAAATCGTCATCTCCATTAGACGCCGCCTCTCGGAATTAGTCCGAGTGTCAGCCAATTTTAGCGCCTGACTCCGCTGGGGTGCGATTCGCCCCACAATTGTATAACGTACGTTGATGAGCAACCGGAGCGACATTCAGGAGAGAGTTCATAGCCGTCCCTTAGTCCGTATCGCATAGCACGCAGGGTCGGCTGACCGCGAAGGGTCAAGTGCTCCCACTCGTCTGTCATTAAGGACCCGCACGAAATCAGCAAGTGGTCAGATGGCCTTCCTCTCCTCTATTAGCTCCTTCCCTCCGATACTCAAAGTCCGCCGCACGTATGATGAGCTGGGGGCGCGACACATTGCAAGCTACGGCTCGAAGATAACGTTGCCTTACACGCATGTATAGAGTACCGCACGGCTACGTCCATGGAGGTATAGGTTTGTTTCAGCACTGGGGGGCAAAATAGCTACTACAAGGTATAATGTCACAATATAGACGTTGCGGCGCTCTTTTGTAAGCAATGCACTATCCGCCACTAAGTGAGCGGAGAGGTAACAAGTTACTATACAAGGACCAGCCACATAAGACGCCTACACTACAGTCGTAAATTTCCCACGGCGCACCGCTAGTGGACATTAACAAGGGGGCAAAGACGTATTTTTTCTGCCTACACAAAACCGATATAATAAGCATCCGCTGGGACATTTAAAGGGCGTCACTGTGTAAGAGCAGAGTACAAGAGGAGGGTCACTTGGGCAAACAAAGAAGAGTGTAGTTAGTCCGCTATTGTGAGTGAAATTAACAGGGTTCGGAAAAGGGACATCAACTGTTGTCCAGCATGAACTACGGTTCCATATGATGGCTAGCAGGTTTGGGTCGCAATCGCTCCCCGCAAGCATTTCCTTAATTGTGTCAAACAATTGACCCAGGGAACGATAGGGCTTCACATGCGACCTCCCACTTGAAGTCCGTCACATGTCTCGGCAGTCTCCCCTTACTGCCAGGAATACGGGCGCCTTTAAAACTCCTTAACTTCTTTGCTCGGCACATGGCGTAAACCGTTCTGATCGCTACGTCATTACTGTTGCTCAGCGTCATGAGCGTGCTGGCTTAACCGCCCGCTGGCGAGTAGCCACCCTGCCTCTCAGGAGGTAGTGCGGATAGTTCTTTTCGGGCGGGCATTGCGATGATATTTGAGTCTGATTGGCGTTGTCGCATGACTGGGTAAATTGACTTGTTGATACGTCGGTTAGCCAACAATGTCCAGTCGCTAATCCACCTGGCGTCGCGAACCACCCATATAAAACCGATATATGAGCAATGTAGTGTAACACGCATGCACTTAATTTCTCCTTAATGATCTGAGGTCCAACTCCTGTATTCGCAGGCTTTAGGTAAGCTCCAATACCATTACACAACCGTTATATGAGACGTGAGTCGGAATCCCGAGGCTGGCGCCCCAGGGATGGGGCAACTATGTATGCCTATTGTAAACAATGATTGGTCTACGGCTACAATAACAATACGCTCCTCCTAGGACTCAGTGGCAACACGCAATTATGGATACATATCGGGGGGAGGGGCAACTAGCATCAATGAAGTTTTACGTAGCGTGAGCATCATGCAGATAAATAACAAAGTCACGTCATATCTGAGTGGGAGCGCGCAATCTCGGAGCACGGCCTGAACCAAATTCCCGTCGAGTTCGTTGCCCCATTACTGGGAAGACAGCGACCGGTACAGCTGCTTCCGGATAGTCTCGGCTAGAAAAGGTCCTTGTCGTCTCGTTCTTCACTGAGACTCCGCTACAGCCGTCCCCGGAGCTAGTTCTATCGGACATCAGCGCGATCGTAACCACGATATTTTACACAATACCCTAACTAGCGCTTTTAACATCAAGCGGTAAGCAGTCAGTCCCGAGTCAGCATACCTCGCTCCGCGGCGCTGGATCTCCGAGCGACGGACGACCCATAGGACAGCCTGAATATACCACGTGTTCGGACGAAGGCTCGCCGGGTTCGGAATAGCGCGAAATAGGATGAGCCTCTCCCTGTCCAGTCGCGTGGTTGCCTGTCGAGCGTAAGACGTAAGTCTAAGTTACGAAATTCTTGGACCTAAAAGACACGCTCCGGCGGTGTCCTTCCGATCCAAACGATGTTCGGAGCGTCATGTTTGAGTAGTTTCACACGAGAAACTTGGAGGGTTATAGTACTACATACTTTCCTTTCCCGTAAGGTATGTCTAGTTAATGTATGGAGGGCAAGGCGAAACTTTGGGGGGGGTGTACCATGACGAAATGCATTAAGAGTC");
	// println!("{}", x);
	// genome::write_to_dot(&x, &String::from("network"));
 
	//let string = String::from("AAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEEFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGHHHHHHHHHHHHHHHH");
	//println!("{} {}", string.len(), string);

	//let mutated = genome::point_mutate(&string, 0.05);
	//println!("{} {}", mutated.len(), mutated);

	//let parent1 = String::from("\
//	AAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBCCCCCCCCCCCCCCCCDDDDDDDDDDDDDDDDEEEEEEEEEEEEEEEE");
//	let parent2 = String::from("\
//	FGFGFGFGFGFGFGFGHIHIHIHIHIHIHIHIJKJKJKJKJKJKJKJKLMLMLMLMLMLMLMLMNONONONONONONONO");
//	println!("{}", parent1);
//	println!("{}", genome::gen_offspring(&parent1, &parent2, 0.01, 0.5));

	// let m_e = genome_to_evaluator(&String::from("AAATTTGAAGCTACAAAACTTTGAAGCTACAAAAGTTTGAAGCTACAAAATTTTGAAGCTACAAACATTTGAAGCTACAAACCTTTGAAGCTACAAACGTTTGAAGCTACAAACTTTTGAAGCTACAAAGATTTGAAGCTACAAAGCTTTGAAGCTACAAAGGTTTGAAGCTACAAAGTTTTGAAGCTACAAATATTTGAAGCTACAAATCTTTGAAGCTACAAATGTTTGAAGCTACAAATTTTTGAAGCTACAACAATTTGAAGCTACAACACTTTGAAGCTACAACAGTTTGAAGCTACAACATTTTGAAGCTACAACCATTTGAAGCTACAACCCTTTGAAGCTACAACCGTTTGAAGCTACAACCTTTTGAAGCTACAACGATTTGAAGCTACAACGCTTTGAAGCTACAACGGTTTGAAGCTACAACGTTTTGAAGCTACAACTATTTGAAGCTACAACTCTTTGAAGCTACAACTGTTTGAAGCTACAACTTTTTGAAGCTACAA"));
	// let b = string_to_board("\
	// 		. . .b.b\n\
	// 		b. . . .\n\
	// 		.w. .b.b\n \
	// 		 .w. .b.\n\
	// 		. . .w.w\n \
	// 		 . .w.w.\n\
	// 		. . . . \n\
	// 		w. .B. .\n");
	// match make_move(&flip_board(&b), 12, &m_e) {
	// 	None => println!("CPU Lost"),
	// 	Some((new_pos, eval)) => println!("{}{}", board_to_string(&flip_board(&new_pos)), eval)
	// };
	// dbg!("{}", (0.11, 0.22));
	// let res = simulate_game(&(&String::from("AAATTTGAAGCTACAAAACTTTGAAGCTACAAAAGTTTGAAGCTACAAAATTTTGAAGCTACAAACATTTGAAGCTACAAACCTTTGAAGCTACAAACGTTTGAAGCTACAAACTTTTGAAGCTACAAAGATTTGAAGCTACAAAGCTTTGAAGCTACAAAGGTTTGAAGCTACAAAGTTTTGAAGCTACAAATATTTGAAGCTACAAATCTTTGAAGCTACAAATGTTTGAAGCTACAAATTTTTGAAGCTACAACAATTTGAAGCTACAACACTTTGAAGCTACAACAGTTTGAAGCTACAACATTTTGAAGCTACAACCATTTGAAGCTACAACCCTTTGAAGCTACAACCGTTTGAAGCTACAACCTTTTGAAGCTACAACGATTTGAAGCTACAACGCTTTGAAGCTACAACGGTTTGAAGCTACAACGTTTTGAAGCTACAACTATTTGAAGCTACAACTCTTTGAAGCTACAACTGTTTGAAGCTACAACTTTTTGAAGCTACAA"), &String::from("AAATTTGAAGCTACAAAACTTTGAAGCTACAAAAGTTTGAAGCTACAAAATTTTGAAGCTACAAACATTTGAAGCTACAAACCTTTGAAGCTACAAACGTTTGAAGCTACAAACTTTTGAAGCTACAAAGATTTGAAGCTACAAAGCTTTGAAGCTACAAAGGTTTGAAGCTACAAAGTTTTGAAGCTACAAATATTTGAAGCTACAAATCTTTGAAGCTACAAATGTTTGAAGCTACAAATTTTTGAAGCTACAACAATTTGAAGCTACAACACTTTGAAGCTACAACAGTTTGAAGCTACAACATTTTGAAGCTACAACCATTTGAAGCTACAACCCTTTGAAGCTACAACCGTTTGAAGCTACAACCTTTTGAAGCTACAACGATTTGAAGCTACAACGCTTTGAAGCTACAACGGTTTGAAGCTACAACGTTTTGAAGCTACAACTATTTGAAGCTACAACTCTTTGAAGCTACAACTGTTTGAAGCTACAACTTTTTGAAGCTACAA")), 6);
	// dbg!("{}", res);

	// let mut v = vec![0, -1, 2, -5, 4, 7];
	// v.par_sort_unstable_by(|a, b| if a < b {
	// 	Ordering::Less
	// } else if a == b {
	// 	Ordering::Equal
	// } else {
	// 	Ordering::Greater
	// });
	// dbg!(v);
}

